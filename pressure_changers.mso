#This code was printed to .pdf format for submission.
#Copy the text to a .txt file and save as pressure_changers.mso to open at EMSO.

using "mbo_streams";

Model valv_liq
	PARAMETERS
	rho_H2Ostd	as dens_mass		(Brief="Pure water mass density at std. cond.",Default=999.054);
	rho_AIRstd	as dens_mass		(Brief="Air mass density at std. cond.",Default=1.2938);
	Tref			as temperature		(Brief="Reference temperature for std. cond.",Default=288.70556);
	Pref			as pressure		(Brief="Reference pressure for std. cond.",DisplayUnit='kPa',Default=1);
	Cv			as positive		(Brief="Valve coefficient constant US units",Unit='gal/min');
	Kv 			as positive		(Brief="Valve coefficient constant SI units",Unit='m^3/h');
	Av 			as area			(Brief="Valve coefficient constant",DisplayUnit='cm^2');
	FL			as fraction		(Brief="Liquid pressure recovery factor",Default=0.91);
	
	SET
	Kv = Cv * sqrt('bar'/'psi');
	Av = Cv * sqrt(rho_H2Ostd/'psi');
	
	VARIABLES
in	Inlet		as strL;
out	Outlet		as triphase_stream;	
	
	fc			as fraction		(Brief="Valve inherent characteristic function",Default=0.5);
	c 			as fraction		(Brief="Valve stem position",Default=0.5);
	FF			as fraction		(Brief="Liquid critical pressure ratio factor",Default=0.96);
	DP			as press_delta		(Brief="Pressure drop",DisplayUnit='kPa',Default=0.1);
	DPchok		as press_delta		(Brief="Pressure drop at choked flow",DisplayUnit='kPa',Default=0.05);
	PvL			as pressure		(Brief="Liquid vapour pressure",DisplayUnit='kPa',Default=80);
	PpcL			as pressure		(Brief="Liquid pseudo-critical pressure",DisplayUnit='kPa',Default=30);
	PpcO			as pressure		(Brief="Oil pseudo-critical pressure",DisplayUnit='kPa',Default=300);
	MwO			as molweight		(Brief="Molar mass for oil phase",DisplayUnit='kg/kmol',Default=300);
	
	Rseq			as positive		(Brief="Solution gas-oil ratio at eq.",Unit='m^3/m^3',Default=10);
	SumInletGas	as positive		(Brief="Inlet streams gas std. vol. flow sum",Unit='m^3/d',Default=2e5);
	Gunbal		as Real			(Brief="Gas std. vol. unbalance",Unit='m^3/d',Default=0);

	EQUATIONS
	#WARNING! This model is strictly singular if the user specify the flow
	#and make free the Outlet.P at FlowSheet section when the flow becomes choked.
	"Pressure-flow relation"
	Inlet.Qf*((1-Inlet.BSW)*Inlet.d60*rho_H2Ostd + Inlet.BSW*Inlet.rho_Wstd) =
		0.5*(1+tanh(((DPchok-DP)/'kPa'+1e-3)/1e-4))*fc*Av*sqrt(Inlet.rhoL*DP) +
		0.5*(1+tanh((DP-DPchok)/'kPa'/1e-4))*fc*Av*sqrt(Inlet.rhoL*DPchok);
	
	"Oil std vol. balance"
	Inlet.Qf*(1-Inlet.BSW) = Outlet.Qf*(1-Outlet.BSW) + Outlet.Qg*Outlet.Rv;

	"Sum of inlet streams gas std. vol."
	SumInletGas = Inlet.Qf*(1-Inlet.BSW)*Inlet.Rs;

	"Gas std. vol. unbalance"
	Gunbal = Outlet.Qf*(1-Outlet.BSW)*Rseq - Inlet.Qf*(1-Inlet.BSW)*Inlet.Rs;

	"Std. vol. balance for liberated gas"
	Outlet.Qg = 0.5*(1+tanh(-Gunbal/'m^3/d'/1e-6))*(-Gunbal);

	"Std. vol. balance for solution gas-oil ratio"
	Outlet.Qf*(1-Outlet.BSW)*Outlet.Rs = 0.5*(1+tanh(Gunbal/'m^3/d'/1e-6))*SumInletGas
		+ 0.5*(1+tanh(-Gunbal/'m^3/d'/1e-6))*Outlet.Qf*(1-Outlet.BSW)*Rseq;

	"Water std vol. balance"
	Inlet.Qf*Inlet.BSW = Outlet.Qf*Outlet.BSW;

	"Water salt mass balance"
	Inlet.ws = Outlet.ws;

	"Energy balance: isenthalpic expansion"
	Inlet.Qf*((1-Inlet.BSW)*Inlet.d60*rho_H2Ostd*Inlet.hO + Inlet.BSW*Inlet.rho_Wstd*Inlet.hW) =
		Outlet.Qf*((1-Outlet.BSW)*Outlet.d60*rho_H2Ostd*Outlet.hO + Outlet.BSW*Outlet.rho_Wstd*Outlet.hW)
		+ Outlet.Qg*rho_AIRstd*Outlet.dg*Outlet.hG;

	"Pressure drop"
	DP = Inlet.P - Outlet.P;
	
	"Pressure drop at choked flow"
	DPchok = FL^2*(Inlet.P - FF*PvL);

	"Liquid critical pressure ratio factor"
	FF = 0.5*(1+tanh((PvL-PpcL)/'bar'/1e-6))*(0.96 - 0.28) +
		0.5*(1+tanh((PpcL-PvL)/'bar'/1e-6))*(0.96 - 0.28*sqrt(PvL/PpcL));

	"Liquid phase vapour pressure"
	PvL = Inlet.P;

	"Oil phase pseudo-critical pressure"	#RIAZI (2005) eq. (2.68) pp. 60
	PpcO/'bar' = 
		6.9575*exp(-1.35e-2*(Inlet.Tbn/'K') - 0.3129*Inlet.d60 + 9.174e-3*(Inlet.Tbn/'K')*Inlet.d60)*
		(Inlet.Tbn/'K')^0.6791/Inlet.d60^0.6807;

	"Oil phase molar mass"	#API-TDB Procedure 2B2.1 (Daubert and Danner 1997)
	MwO/'kg/kmol' = 20.486*(Inlet.Tbn/'degR')^1.26007*(Inlet.d60)^4.98308*
		exp(1.165e-4*(Inlet.Tbn/'degR') - 7.78712*Inlet.d60 + 1.1582e-3*(Inlet.Tbn/'degR')*Inlet.d60);

	"Molar mixing rule for liquid phase pseudo-critical pressure"
	((1-Inlet.BSW)*Inlet.d60*rho_H2Ostd/MwO + Inlet.BSW*Inlet.rho_Wstd/(18.02*'kg/kmol'))*PpcL = 
		PpcO*(1-Inlet.BSW)*Inlet.d60*rho_H2Ostd/MwO 
		+ 220.64*'bar'*Inlet.BSW*Inlet.rho_Wstd/(18.02*'kg/kmol');
	
	"Linear inherent characteristic function"
	fc = c;

	"Solution gas/oil ratio"
	Rseq/'ft^3/bbl' = 
		0.0362*(Outlet.dg*(1 + 5.912e-5*(141.5/Outlet.d60-131.5)*(40*1.8+32)*ln(14.7/114.7)))
		*(Outlet.P/'psi')^1.0937*exp(25.724*(141.5/Outlet.d60-131.5)/(Outlet.T/'degR'));

	"Vaporized oil/gas ratio"
	Outlet.Rv/Outlet.Ycg = (4.7e-7*(Outlet.P/'psi')^2 - 1.4e-3*(Outlet.P/'psi') + 2.3)*
		exp(-5.438e-3*Outlet.dg)*exp(-6.8e8*Outlet.d60/(Outlet.T/'degR')^3);

	"Equates of outlet stream for compositional variables"
	Outlet.d60 = Inlet.d60;
	Outlet.Tbn = Inlet.Tbn;
	Outlet.dg = Inlet.dgL;
	Outlet.Ycg = Inlet.YcgL;
end

Model valv_liq_ctrl as valv_liq
	PARAMETERS
	tau		as time_sec	(Brief="Valve time constant",Default=0);
	
	VARIABLES
in	MVinput	as Real		(Brief="Input signal from controller",Default=0.5);

	EQUATIONS
	"Linear first-order dynamic behavior"
	(1e-3*'s'+tau)*diff(c) + c = MVinput;
end

Model valv_cond
	PARAMETERS
	rho_H2Ostd	as dens_mass		(Brief="Pure water mass density at std. cond.",Default=999.054);
	rho_AIRstd	as dens_mass		(Brief="Air mass density at std. cond.",Default=1.2938);
	Tref			as temperature		(Brief="Reference temperature for std. cond.",Default=288.70556);
	Pref			as pressure		(Brief="Reference pressure for std. cond.",DisplayUnit='kPa',Default=1);
	Cv			as positive		(Brief="Valve coefficient constant US units",Unit='gal/min');
	Kv 			as positive		(Brief="Valve coefficient constant SI units",Unit='m^3/h');
	Av 			as area			(Brief="Valve coefficient constant",DisplayUnit='cm^2');
	FL			as fraction		(Brief="Liquid pressure recovery factor",Default=0.91);
	
	SET
	Kv = Cv * sqrt('bar'/'psi');
	Av = Cv * sqrt(rho_H2Ostd/'psi');
	
	VARIABLES
in	Inlet		as strL;
out	Outlet		as biphase_stream;	
		
	fc			as fraction		(Brief="Valve inherent characteristic function",Default=0.5);
	c 			as fraction		(Brief="Valve stem position",Default=0.5);
	FF			as fraction		(Brief="Liquid critical pressure ratio factor",Default=0.96);
	DP			as press_delta		(Brief="Pressure drop",DisplayUnit='kPa',Default=0.1);
	DPchok		as press_delta		(Brief="Pressure drop at choked flow",DisplayUnit='kPa',Default=0.05);
	PvL			as pressure		(Brief="Liquid vapour pressure",DisplayUnit='kPa',Default=80);
	PpcL			as pressure		(Brief="Liquid pseudo-critical pressure",DisplayUnit='kPa',Default=30);
	
	Rseq			as positive		(Brief="Solution gas-oil ratio at eq.",Unit='m^3/m^3',Default=10);
	SumInletGas	as positive		(Brief="Inlet streams gas std. vol. flow sum",Unit='m^3/d',Default=2e5);
	Gunbal		as Real			(Brief="Gas std. vol. unbalance",Unit='m^3/d',Default=0);

	EQUATIONS
	#WARNING! This model is strictly singular if the user specify the flow
	#and make free the Outlet.P at FlowSheet section when the flow becomes choked.
	"Pressure-flow relation"
	Inlet.Qf*Inlet.d60*rho_H2Ostd =
		0.5*(1+tanh(((DPchok-DP)/'kPa'+1e-3)/1e-4))*fc*Av*sqrt(Inlet.rhoL*DP) +
		0.5*(1+tanh((DP-DPchok)/'kPa'/1e-4))*fc*Av*sqrt(Inlet.rhoL*DPchok);
	
	"Oil std vol. balance"
	Inlet.Qf = Outlet.Qf + Outlet.Qg*Outlet.Rv;

	"Sum of inlet streams gas std. vol."
	SumInletGas = Inlet.Qf*Inlet.Rs;

	"Gas std. vol. unbalance"
	Gunbal = Outlet.Qf*Rseq - Inlet.Qf*Inlet.Rs;

	"Std. vol. balance for liberated gas"
	Outlet.Qg = 0.5*(1+tanh(-Gunbal/'m^3/d'/1e-6))*(-Gunbal);

	"Std. vol. balance for solution gas-oil ratio"
	Outlet.Qf*Outlet.Rs = 0.5*(1+tanh(Gunbal/'m^3/d'/1e-6))*SumInletGas
		+ 0.5*(1+tanh(-Gunbal/'m^3/d'/1e-6))*Outlet.Qf*Rseq;

	"Energy balance: isenthalpic expansion"
	Inlet.Qf*Inlet.d60*rho_H2Ostd*Inlet.hO = Outlet.Qf*Outlet.d60*rho_H2Ostd*Outlet.hO 
		+ Outlet.Qg*rho_AIRstd*Outlet.dg*Outlet.hG;

	"Pressure Drop"
	DP = Inlet.P - Outlet.P;
	
	"Pressure drop at choked flow"
	DPchok = FL^2*(Inlet.P - FF*PvL);

	"Liquid phase critical pressure ratio factor"
	FF = 0.5*(1+tanh((PvL-PpcL)/'bar'/1e-6))*(0.96 - 0.28) +
		0.5*(1+tanh((PpcL-PvL)/'bar'/1e-6))*(0.96 - 0.28*sqrt(PvL/PpcL));

	"Liquid phase vapour pressure"
	PvL = Inlet.P;

	"Liquid phase pseudo-critical pressure"	#RIAZI (2005) eq. (2.68) pp. 60
	PpcL/'bar' = 
		6.9575*exp(-1.35e-2*(Inlet.Tbn/'K') - 0.3129*Inlet.d60 + 9.174e-3*(Inlet.Tbn/'K')*Inlet.d60)*
		(Inlet.Tbn/'K')^0.6791/Inlet.d60^0.6807;
	
	"Linear inherent characteristic function"
	fc = c;

	"Solution gas/oil ratio"
	Rseq/'ft^3/bbl' = 
		0.0362*(Outlet.dg*(1 + 5.912e-5*(141.5/Outlet.d60-131.5)*(40*1.8+32)*ln(14.7/114.7)))
		*(Outlet.P/'psi')^1.0937*exp(25.724*(141.5/Outlet.d60-131.5)/(Outlet.T/'degR'));

	"Vaporized oil/gas ratio"
	Outlet.Rv/Outlet.Ycg = (4.7e-7*(Outlet.P/'psi')^2 - 1.4e-3*(Outlet.P/'psi') + 2.3)*
		exp(-5.438e-3*Outlet.dg)*exp(-6.8e8*Outlet.d60/(Outlet.T/'degR')^3);

	"Equates of outlet stream for compositional variables"
	Outlet.d60 = Inlet.d60;
	Outlet.Tbn = Inlet.Tbn;
	Outlet.dg = Inlet.dgL;
	Outlet.Ycg = Inlet.YcgL;
end

Model valv_cond_ctrl as valv_cond
	PARAMETERS
	tau		as time_sec	(Brief="Valve time constant",Default=0);
	
	VARIABLES
in	MVinput	as Real		(Brief="Input signal from controller",Default=0.5);

	EQUATIONS
	"Linear first-order dynamic behavior"
	(1e-3*'s'+tau)*diff(c) + c = MVinput;
end

Model valv_gas
	PARAMETERS
	rho_H2Ostd	as dens_mass		(Brief="Pure water mass density at std. cond.",Default=999.054);
	rho_AIRstd	as dens_mass		(Brief="Air mass density at std. cond.",Default=1.2938);
	Tref			as temperature		(Brief="Reference temperature for std. cond.",Default=288.70556);
	Pref			as pressure		(Brief="Reference pressure for std. cond.",DisplayUnit='kPa',Default=1);
	Cv			as positive		(Brief="Valve coefficient constant US units",Unit='gal/min');
	Kv 			as positive		(Brief="Valve coefficient constant SI units",Unit='m^3/h');
	Av			as area			(Brief="Valve coefficient constant",DisplayUnit='cm^2');
	Fgamma		as positive		(Brief="Specific heat capacity ratio factor",Default=0.8);
	xT			as positive		(Brief="Pressure drop ratio factor",Default=0.7);

	SET
	Kv = Cv * sqrt('bar'/'psi');
	Av = Cv * sqrt(rho_H2Ostd/'psi');
	
	VARIABLES
in	Inlet	as strG;
out	Outlet	as gas_stream;

	fc		as fraction			(Brief="Valve inherent characteristic function",Default=0.5);
	c 		as fraction			(Brief="Valve stem position",Default=0.5);
	x		as positive			(Brief="Pressure drop ratio to inlet pressure",Default=0.8);
	xchok	as positive			(Brief="Choked flow pressure drop ratio to inlet pressure",Default=0.8);
	Fexp		as positive			(Brief="Expansion factor",Default=1.5);
	DP		as press_delta			(Brief="Pressure drop",DisplayUnit='kPa',Default=0.1);
	
	EQUATIONS
	#WARNING! This model is strictly singular if the user specify the flow
	#and make free the Outlet.P at FlowSheet section when the flow becomes choked.
	"Pressure-flow relation"
	Inlet.Qg*Inlet.dg*rho_AIRstd = 
		0.5*(1+tanh((xchok-x+1e-3)/1e-4))*fc*Av*Fexp*sqrt(x*Inlet.P*Inlet.rhoG) +
		+ 0.5*(1+tanh((x-xchok)/1e-4))*fc*Av*(2/3)*sqrt(xchok*Inlet.P*Inlet.rhoG);

	"Oil std. vol. flow Balance"
	Inlet.Rv = Outlet.Rv;

	"Gas std. vol. flow Balance"
	Inlet.Qg = Outlet.Qg;

	"Energy balance: isenthalpic expansion"
	Inlet.hG = Outlet.hG;

	"Linear inherent characteristic function"
	fc = c;

	"Pressure drop"
	DP = Inlet.P - Outlet.P;
	
	"Pressure drop ratio"
	x*Inlet.P = DP;
	
	"Pressure drop at choked flow"
	xchok = Fgamma*xT;
	
	"Expansion factor"
	Fexp = 1-x/(3*Fgamma*xT);
	
	"Equates of outlet stream compositional variables"
	Outlet.d60G = Inlet.d60G;
	Outlet.TbnG = Inlet.TbnG;
	Outlet.dg = Inlet.dg;
	Outlet.Ycg = Inlet.Ycg;
end

Model valv_gas_ctrl as valv_gas
	PARAMETERS
	tau	as time_sec	(Brief="Valve time constant",Default=0);
	
	VARIABLES
in	MVinput	as Real	(Brief="Input signal from controller",Default=0.5);

	EQUATIONS
	"Linear first-order dynamic behavior"
	(1e-3*'s'+tau)*diff(c) + c = MVinput;

end

Model valv_gasliq
	PARAMETERS
	rho_H2Ostd	as dens_mass		(Brief="Pure water mass density at std. cond.",Default=999.054);
	rho_AIRstd	as dens_mass		(Brief="Air mass density at std. cond.",Default=1.2938);
	Tref			as temperature		(Brief="Reference temperature for std. cond.",Default=288.70556);
	Pref			as pressure		(Brief="Reference pressure for std. cond.",DisplayUnit='kPa',Default=1);
	Cv			as positive		(Brief="Valve coefficient constant US units",Unit='gal/min');
	Kv 			as positive		(Brief="Valve coefficient constant SI units",Unit='m^3/h');
	Av			as area			(Brief="Valve coefficient constant",DisplayUnit='cm^2');
	Fgamma		as positive		(Brief="Specific heat capacity ratio factor",Default=0.8);
	xT			as positive		(Brief="Pressure drop ratio factor",Default=0.7);

	SET
	Kv = Cv * sqrt('bar'/'psi');
	Av = Cv * sqrt(rho_H2Ostd/'psi');
	
	VARIABLES
in	Inlet		as strGL;
out	Outlet		as gasliq_stream;
		
	fc			as fraction		(Brief="Valve inherent characteristic function",Default=0.5);
	c 			as fraction		(Brief="Valve stem position",Default=0.5);
	x			as positive		(Brief="Pressure drop ratio to inlet pressure",Default=0.8);
	xchok		as positive		(Brief="Choked flow pressure drop ratio to inlet pressure",Default=0.8);
	Fexp			as positive		(Brief="Expansion factor",Default=1.5);
	DP			as press_delta		(Brief="Pressure drop",DisplayUnit='kPa',Default=0.1);
	
	Rveq			as positive		(Brief="Vaporized oil-gas ratio at eq.",Unit='l/m^3',Default=0.05);
	SumInletOil	as positive		(Brief="Inlet streams oil std. vol. flow sum",Unit='m^3/d',Default=1e2);
	Ounbal		as Real			(Brief="Oil std. vol. unbalance",Unit='m^3/d',Default=0);

	EQUATIONS
	#WARNING! This model is strictly singular if the user specify the flow
	#and make free the Outlet.P at FlowSheet section when the flow becomes choked.
	"Pressure-flow relation"
	Inlet.Qg*Inlet.dg*rho_AIRstd = 
		0.5*(1+tanh((xchok-x+1e-3)/1e-4))*fc*Av*Fexp*sqrt(x*Inlet.P*Inlet.rhoG) +
		+ 0.5*(1+tanh((x-xchok)/1e-4))*fc*Av*(2/3)*sqrt(xchok*Inlet.P*Inlet.rhoG);

	"Sum of inlet streams oil std. vol."
	SumInletOil = Inlet.Qg*Inlet.Rv + Inlet.Qo;

	"Oil std. vol. unbalance"
	Ounbal = Outlet.Qg*Rveq - (Inlet.Qg*Inlet.Rv + Inlet.Qo);

	"Std. vol. balance for condensed oil"
	Outlet.Qo = 0.5*(1+tanh(-Ounbal/'m^3/d'/1e-6))*(-Ounbal);

	"Std. vol. balance for volatiled oil-gas ratio"
	Outlet.Qg*Outlet.Rv = 0.5*(1+tanh(Ounbal/'m^3/d'/1e-6))*SumInletOil
		+ 0.5*(1+tanh(-Ounbal/'m^3/d'/1e-6))*Outlet.Qg*Rveq;

	"Gas std. vol. flow Balance"
	Inlet.Qg + Inlet.Qo*Inlet.Rs = Outlet.Qg + Outlet.Qo*Outlet.Rs;

	"Energy balance: Isenthalpic expansion"
	Inlet.Qg*Inlet.dg*rho_AIRstd*Inlet.hG + Inlet.Qo*Inlet.d60*rho_H2Ostd*Inlet.hO
		= Outlet.Qg*Outlet.dg*rho_AIRstd*Outlet.hG + Outlet.Qo*Outlet.d60*rho_H2Ostd*Outlet.hO;

	"Linear inherent characteristic function"
	fc = c;

	"Pressure drop"
	DP = Inlet.P - Outlet.P;
	
	"Pressure drop ratio"
	x*Inlet.P = DP;
	
	"Pressure drop at choked flow"
	xchok = Fgamma*xT;
	
	"Expansion factor"
	Fexp = 1-x/(3*Fgamma*xT);

	"Solution gas/oil ratio"
	Outlet.Rs/'ft^3/bbl' = 
		0.0362*(Outlet.dg*(1 + 5.912e-5*(141.5/Outlet.d60-131.5)*(40*1.8+32)*ln(14.7/114.7)))
		*(Outlet.P/'psi')^1.0937*exp(25.724*(141.5/Outlet.d60-131.5)/(Outlet.T/'degR'));

	"Vaporized oil/gas ratio"
	Rveq/Outlet.Ycg = (4.7e-7*(Outlet.P/'psi')^2 - 1.4e-3*(Outlet.P/'psi') + 2.3)*
		exp(-5.438e-3*Outlet.dg)*exp(-6.8e8*Outlet.d60/(Outlet.T/'degR')^3);

	"Equates of outlet stream compositional variables"
	Outlet.d60G = Inlet.d60G;
	Outlet.TbnG = Inlet.TbnG;
	Outlet.dg = Inlet.dg;
	Outlet.Ycg = Inlet.Ycg;
end

Model valv_gasliq_ctrl as valv_gasliq
	PARAMETERS
	tau		as time_sec	(Brief="Valve time constant",Default=0);
	
	VARIABLES
in	MVinput	as Real		(Brief="Input signal from controller",Default=0.5);

	EQUATIONS
	"Linear first-order dynamic behavior"
	(1e-3*'s'+tau)*diff(c) + c = MVinput;
end

Model valv_water
	PARAMETERS
	rho_H2Ostd	as dens_mass		(Brief="Pure water mass density at std. cond.",Default=999.054);
	Cv			as positive		(Brief="Valve coefficient constant US units",Unit='gal/min');
	Kv 			as positive		(Brief="Valve coefficient constant SI units",Unit='m^3/h');
	Av 			as area			(Brief="Valve coefficient constant",DisplayUnit='cm^2');
	FL			as fraction		(Brief="Liquid pressure recovery factor",Default=0.91);
	
	SET
	Kv = Cv * sqrt('bar'/'psi');
	Av = Cv * sqrt(rho_H2Ostd/'psi');
	
	VARIABLES
in	Inlet		as strW;
out	Outlet		as water_stream;	
	
	fc			as fraction		(Brief="Valve inherent characteristic function",Default=0.5);
	c 			as fraction		(Brief="Valve stem position",Default=0.5);
	FF			as fraction		(Brief="Liquid critical pressure ratio factor",Default=0.96);
	DP			as press_delta		(Brief="Pressure drop",DisplayUnit='kPa',Default=0.1);
	DPchok		as press_delta		(Brief="Pressure drop at choked flow",DisplayUnit='kPa',Default=0.05);
	PvW			as pressure		(Brief="Water vapour pressure",DisplayUnit='kPa',Default=80);
	PpcW			as pressure		(Brief="Water pseudo-critical pressure",DisplayUnit='kPa',Default=30);
	
	EQUATIONS
	#WARNING! This model is strictly singular if the user specify the flow
	#and make free the Outlet.P at FlowSheet section when the flow becomes choked.
	"Pressure-flow relation"
	Inlet.Qw*Inlet.rho_Wstd =
		0.5*(1+tanh(((DPchok-DP)/'kPa'+1e-3)/1e-4))*fc*Av*sqrt(Inlet.rhoW*DP) +
		0.5*(1+tanh((DP-DPchok)/'kPa'/1e-4))*fc*Av*sqrt(Inlet.rhoW*DPchok);
	
	"Oil std. vol. flow balance"
	Inlet.TOG = Outlet.TOG;
	
	"Water std. vol. flow balance"
	Inlet.Qw = Outlet.Qw;
	
	"Water salt mass balance"
	Inlet.ws = Outlet.ws;

	"Energy balance: Isenthalpic expansion"
	Outlet.hW = Inlet.hW;
	
	"Pressure Drop"
	DP = Inlet.P - Outlet.P;
	
	"Pressure drop at choked flow"
	DPchok = FL^2*(Inlet.P - FF*PvW);

	"Liquid critical pressure ratio factor"
	FF = 0.5*(1+tanh((PvW-PpcW)/'bar'/1e-6))*(0.96 - 0.28) +
		0.5*(1+tanh((PpcW-PvW)/'bar'/1e-6))*(0.96 - 0.28*sqrt(PvW/PpcW));

	"Liquid vapour pressure - Antoine equation for pure water"
	log(PvW/'bar') = 5.11564 - 1687.537/(Inlet.T/'K'+230.17-273.15);

	"Liquid Absolute thermodynamic pseudo-critical pressure - Pure water"
	PpcW = 220.64*'bar';
	
	"Linear inherent characteristic function"
	fc = c;

	"Equates of outlet stream for compositional variables"
	Outlet.d60 = Inlet.d60;
	Outlet.Tbn = Inlet.Tbn;
end

Model valv_water_ctrl as valv_water
	PARAMETERS
	tau		as time_sec	(Brief="Valve time constant",Default=0);
	
	VARIABLES
in	MVinput	as Real		(Brief="Input signal from controller",Default=0.5);

	EQUATIONS
	"Linear first-order dynamic behavior"
	(1e-3*'s'+tau)*diff(c) + c = MVinput;
end

Model pump_liq
	PARAMETERS
	g			as constant 		(Brief="Gravity acceleration",Default=9.80665,Unit='m/s^2');	
	rho_H2Ostd	as dens_mass		(Brief="Pure water mass density at std. cond.",Default=999.054);
	h0			as positive		(Brief="Shut-off head",Unit='m',Default=30);
	A 			as positive		(Brief="Pressure-flow pump relation coefficient",Unit='s^2/m^5',Default=1e-5);
	
	VARIABLES
in	Inlet		as strL;
out	Outlet		as liquid_stream;	
	
	Win			as power			(Brief="Pump power",DisplayUnit='kW',Default=100);
	DP			as press_delta		(Brief="Pressure rise",DisplayUnit='kPa',Default=10);
	
	EQUATIONS
	"Pressure-flow relation"
	DP/(Inlet.rhoL*g) = 
		h0 - A*(Inlet.Qf*((1-Inlet.BSW)*Inlet.d60*rho_H2Ostd + Inlet.BSW*Inlet.rho_Wstd)/Inlet.rhoL)^2;
	
	"Liquid std vol. balance"
	Outlet.Qf = Inlet.Qf;

	"Gas std. vol. balance"
	Outlet.Rs = Inlet.Rs;

	"Water std. vol. balance"
	Outlet.BSW = Inlet.BSW;
	
	"Water salt mass balance"
	Outlet.ws = Inlet.ws;

	"Energy balance: Isothermal compression"
	Outlet.T = Inlet.T;
	
	"Pressure Rise"
	DP = Outlet.P - Inlet.P;
	
	"Power supplied"
	Win = DP*(Inlet.Qf*((1-Inlet.BSW)*Inlet.d60*rho_H2Ostd + Inlet.BSW*Outlet.rho_Wstd)/Inlet.rhoL);

	"Equates of outlet stream for compositional variables"
	Outlet.d60 = Inlet.d60;
	Outlet.Tbn = Inlet.Tbn;
	Outlet.dg = Inlet.dg;
	Outlet.Ycg = Inlet.Ycg;
end

Model pump_water
	PARAMETERS
	g			as constant 		(Brief="Gravity acceleration",Default=9.80665,Unit='m/s^2');	
	rho_H2Ostd	as dens_mass		(Brief="Pure water mass density at std. cond.",Default=999.054);
	h0			as positive		(Brief="Shut-off head",Unit='m',Default=30);
	A 			as positive		(Brief="Pressure-flow pump relation coefficient",Unit='s^2/m^5',Default=1e-5);
	
	VARIABLES
in	Inlet		as strW			(Brief="Inlet stream");
out	Outlet		as water_stream	(Brief="Outlet stream");	
	
	Win			as power			(Brief="Pump power",DisplayUnit='kW',Default=100);
	DP			as press_delta		(Brief="Pressure rise",DisplayUnit='kPa',Default=10);
	
	EQUATIONS
	"Pressure-flow relation"
	DP/(Inlet.rhoW*g) = h0 - A*(Inlet.Qw*Outlet.rho_Wstd/Inlet.rhoW)^2;
	
	"Liquid std vol. flow balance"
	Outlet.Qw = Inlet.Qw;

	"Oil std. vol. flow balance"
	Outlet.TOG = Inlet.TOG;
	
	"Water salt mass balance"
	Outlet.ws = Inlet.ws;

	"Energy balance: isothermal compression"
	Outlet.T = Inlet.T;
	
	"Pressure Rise"
	DP = Outlet.P - Inlet.P;

	"Power supplied"
	Win = DP*Inlet.Qw*Outlet.rho_Wstd/Inlet.rhoW;
	
	"Equates of outlet stream for compositional variables"
	Outlet.d60 = Inlet.d60;
	Outlet.Tbn = Inlet.Tbn;
end

Model compressor
	PARAMETERS
	R			as positive		(Brief="Ideal Gas Constant",Unit='kJ/kmol/K',Default=8.31447);
	rho_AIRstd	as dens_mass		(Brief="Air mass density at std. cond.",Default=1.2938);
	Tref			as temperature		(Brief="Reference temperature for std. cond.",Default=288.70556);
	Pref			as pressure		(Brief="Reference pressure for std. cond.",DisplayUnit='kPa',Default=1);
	CpCv			as positive		(Brief="Adiabatic expansion coefficient",Default=1.2);
	effM			as fraction		(Brief="Mechanical efficiency",Default=0.95);
	
	a2			as positive		(Brief="Pratio characteristc curve 2nd parameter",Default=0.35);
	a3			as positive		(Brief="Pratio characteristc curve 3rd parameter",Default=1.3);
	a4			as positive		(Brief="Pratio characteristc curve 4th parameter",Default=0.8);
	p0			as positive		(Brief="Isentropic efficiency polynomial 1st parameter",Default=0.35);
	p1			as positive		(Brief="Isentropic efficiency polynomial 2nd parameter",Default=0.36);
	p2			as positive		(Brief="Isentropic efficiency polynomial 3rd parameter",Default=0.6);
	
	VARIABLES
in	Inlet		as strG;
out	Outlet		as gas_stream;	
	
	Qg_act		as positive		(Brief="Gas actual vol. Flow Rate",Unit='m^3/h',Default=1e4);
	Wbreak		as power			(Brief="Compressor mechanical power",DisplayUnit='MW',Default=6200);
	Wfluid		as power			(Brief="Compressor fluid power",DisplayUnit='MW',Default=6000);
	RP			as positive		(Brief="Pressure ratio",Default=4);
	HeadS		as enth_mass		(Brief="Compressor isentropic head",Default=300);
	Head			as enth_mass		(Brief="Compressor head",Default=400);
	effS			as fraction		(Brief="Isentropic efficiency",Default=0.55);
	Nr			as positive		(Brief="Compressor rotation",Unit='rpm',Default=11000);
	ZgIn			as positive		(Brief="Gas compressibility factor for inlet conditions",Default=1.0);
	
	EQUATIONS
	"Pressure flow relation"	#CAMPOS & TEIXEIRA (2010)
	RP^((CpCv-1)/CpCv) - 1 = (a2*1e-8)*(Nr/'rpm')^2 + 
		(a3*1e-6)*(Nr/'rpm')*(Inlet.Qg*Inlet.dg*rho_AIRstd/'kg/s')/(Inlet.P/'bar') - 
		(a4*1e-1)*(Inlet.Qg*Inlet.dg*rho_AIRstd/'kg/s')^2/(Inlet.P/'bar')^2;
	
	"Pressure ratio vs. isentropic head relation"
	HeadS = CpCv/(CpCv-1)*R/(Inlet.dg*29*'kg/kmol')*Inlet.T*0.5*(ZgIn+Outlet.Zg)*
		(RP^((CpCv-1)/CpCv) - 1);

	"Gas std vol. balance"
	Outlet.Qg = Inlet.Qg;
	
	"Oil std vol. balance"
	Outlet.Rv = Inlet.Rv;

	"Compressor head rise"
	Head = Outlet.hG - Inlet.hG;

	"Isentropic efficiency constraint"
	effS*Head = HeadS;

	"Pressure ratio"
	RP*Inlet.P = Outlet.P;
	
	"Compressor mechanical efficiency"
	Wbreak*effM = Wfluid;
	
	"Compressor fluid power"
	Wfluid = Head*Inlet.Qg*Inlet.dg*rho_AIRstd;
 
	"Mass flow rate x isentropic efficiency: Quadratic polynomial"
	effS = p0 + (p1*1e-1)*(Inlet.Qg*Inlet.dg*rho_AIRstd/'kg/s') -
		(p2*1e-3)*(Inlet.Qg*Inlet.dg*rho_AIRstd/'kg/s')^2;

	"Inlet gas actual vol. flow"
	Qg_act*Inlet.rhoG = Inlet.Qg*Inlet.dg*rho_AIRstd;

	"Gas Compressibility Factor for inlet conditions"
	ZgIn = Inlet.Bg*(Inlet.P/Pref)*(Tref/Inlet.T);

	"Equates of outlet stream compositional variables"
	Outlet.d60G = Inlet.d60G;
	Outlet.TbnG = Inlet.TbnG;
	Outlet.dg = Inlet.dg;	
	Outlet.Ycg = Inlet.Ycg;
end
